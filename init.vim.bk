" Options
set background=dark
set clipboard=unnamedplus
set completeopt=noinsert,menuone,noselect
set cursorline
set hidden
set inccommand=split
set mouse=a
set number
set relativenumber
set splitbelow splitright
set title
set ttimeoutlen=0
set wildmenu
set autoread
set showcmd
set autoindent                          " Auto indention should be on
set nowrap
set lazyredraw
set incsearch
set smartcase
set laststatus=2
set noshowmatch
set termguicolors
set nobackup
set nowritebackup
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/* " Tap completion
set belloff=all " Off shit bell
set nocompatible " Use VIM settings rather than Vi settings; this *must* be first in .vimrc
set encoding=UTF-8


" Indentation
set expandtab
set shiftwidth=2
set tabstop=2

" Search settings
hi Search cterm=NONE
hi Search ctermbg=Grey
hi Search ctermfg=NONE
nnoremap <cr> :noh<CR><CR>:<backspace> " Hide matched search after done


" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost * echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

autocmd Filetype go setlocal expandtab tabstop=4 shiftwidth=4

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-system-copy'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'garbas/vim-snipmate'
Plug 'gmarik/vundle'
Plug 'honza/vim-snippets'
Plug 'janko-m/vim-test'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-user'
Plug 'michaeljsmith/vim-indent-object'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomasr/molokai'
Plug 'tomlion/vim-solidity'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'
" Plug 'tpope/vim-rails.git'
Plug 'fatih/vim-go'
Plug 'dart-lang/dart-vim-plugin'
Plug 'rust-lang/rust.vim'
" Plug 'dense-analysis/ale'
Plug 'neovim/nvim-lspconfig' " Configuration for Nvim LSP
" Plug 'ryanoasis/vim-devicons'
Plug 'sbdchd/neoformat'

call plug#end()

" avoid mistyping commands
command! Bd bd
command! W w
command! Wq wq

let loaded_matchparen = 1
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeNodeDelimiter = "\u00a0"

" Auto remove trailing whitespace and spaces when save ruby files
autocmd BufWritePre *.rb %s/\s\+$//e

" Leader key
let mapleader=","

" Disable some keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" move to beginning/end of line
nnoremap $ <nop>
nnoremap ^ <nop>
nnoremap B ^
nnoremap E $

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
" Removing escape
ino jj <esc>
cno jj <c-c>
vno v <esc>
" Opens and closes Nerdtree with ,q
map <Tab><Tab> :NERDTreeToggle<CR>

" Hide snipMate warning
let g:snipMate = { 'snippet_version' : 1 }


let g:neoformat_try_node_exe = 1
autocmd BufWritePre *.js Neoformat
